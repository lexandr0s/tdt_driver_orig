What is stmfb?
=================

This is a framebuffer driver for certain STMicroelectronics SoCs. Where a
device supports multiple independent display pipelines, the driver is
multi-instance and can be configured to register multiple framebuffers. This
driver internally registers as a platform driver for the device name
"stmcore-display". Nothing will happen until an "stmcore-display-*" module is
loaded into the system (see Documentation/stmcoredisplay.txt)

How to use it?
==============

To enable a framebuffer on an available display pipeline a module parameter
describing the default configuration must be provided. For instance, on the
STx7100:

modprobe stmfb display0=1280x720-24@60:10M:0:NTSC:YUV:YUV

Initialises a framebuffer on the main (HD) display pipeline, but not on the
aux (SD) pipeline.

modprobe stmfb display0=1280x720-24@60:10M:0:NTSC:YUV:YUV \
               display1=720x576-16@50i:3M:0:PAL:CVBS
                    
Initialises two framebuffers, one on each available display pipeline.

Once loaded, fbset can be used to change the framebuffer display mode, within
the constraints of the amount of video memory specified in the module parameter.

Regardless of the name of the display pipelines in use, the created framebuffer
devices are numbered from zero. E.g. if only "display1" is configured, this will
appear as the framebuffer device /dev/fb0, not /dev/fb1.

The list of registered framebuffers can be found by the command:

cat /proc/fb

Display pipeline capabilities
=============================

Each display pipeline on a chip has different capabilities and there are 
circumstances where they share resources, restricting the possible use cases.

         |   7100/7109   |   7200Cut1/2  | 7111/7141/7105 |    5202    |
         |---------------|---------------|----------------|------------|
display0 | VGA/HD/ED/SD* | VGA/HD/ED/SD* | VGA/HD/ED/SD*  | VGA/ED/SD* |
display1 | SD*           | SD*           | SD*            | SD*        |
display2 |   N/A         | SD            |      N/A       | N/A        |

* SD modes cannot be started simultaneously on display0 and display1


Parameter Strings
=================

The stmfb module supports up to four display pipelines, configured using
the module parameters display[0-3]. On STx7100 and STx7109 only
display0 and display1 are available for use. The parameter strings are colon
or comma separated of which only the first item, the default display mode string
is required. Although in practice the second item, specifying the amount of
memory to reserve for this framebuffer, will almost always be present. The
full parameter string is as follows:

paramstring := <mode>:<memsize>:<auxmemsize>:<sdmode>:<analoguecolour>:<hdmicolour>:<bdispapiversion>

mode := <xres>x<yres>[-<bpp>][@<refresh>][i]

memsize := <num>[M|K]

auxmemsize := <num>[M][K]

sdmode := N[TSC-M] | n[tsc-m] | NTSC-J | NTSC-443 |
          P[AL] | p[al] | PAL-M | PAL-N | PAL-Nc |
          S[ECAM] | s[ecam]
          
analoguecolour := R[GB] | r[gb] | Y[UV] | y[uv] | C[VBS] | c[vbs]

hdmicolour := R[GB] | r[gb] | Y[UV] | y[uv]

bdispapiversion := 0 | 1

If <sdmode>,<analoguecolour> and <hdmicolour> are not specified their default
values are "NTSC","RGB" and "RGB" respectively. If the <memsize> specified
is smaller than that required by the display mode specified in <mode>,
the allocated memory is adjusted upwards to meet the minimum requirements of
that mode. If <-bpp> is omitted from the mode description, the colour will
default to 16bit RGB565.

If the specified <mode> cannot be supported on the display pipeline, a close
match or default mode is picked instead. The actual mode can be determined
after the framebuffer module has been loaded using the fbset command.

Framebuffer Memory
==================

The framebuffer allocates memory from bigphysarea, or if the new BPA2 interface
is configured in the kernel the bigphysarea compatibility memory partition. 
Therefore, sufficient bigphysarea pages must be configured on the kernel
boot command line to meet your framebuffer configurations. 

How much memory should you configure for a framebuffer? For just a framebuffer
that is a simple calculation of the maximum resolution to be used multiplied 
by the colour depth required. E.g.:

PAL  : 16bit colour = 720*576*2   = 829940 bytes
1080i: 32bit colour = 1920x1080*4 = 8299400 bytes (nearly 8Mbytes!)

However it gets a bit more complicated if you want to take advantage of 
DirectFB double tripple buffering and hardware accelerated graphics. DirectFB 
takes all of the memory assigned to the framebuffer, and uses any not required
for the primary surface as its offscreen surface cache. Hardware accelerated
drawing can only use surfaces (either source or destination) that have been
allocated from this cache, or the primary surface. So let us take an example of
a 1920x1080 tripple buffered primary surface and the requirement of 8Mb of 
cached decoded JPEGs which contain pre-rendered graphics used compose the 
final display of the application. That is going to require ~ 8*3 + 8 = 32Mb
of framebuffer memory.

DirectFB is also able to fully use any auxiliary memory for offscreen surfaces,
so that e.g. the cached decoded JPEGs from above could be placed into LMI_VID,
reducing the memory requirements of the main framebuffer memory to 24MB in the
above example.
To make use of this feature, the options to stmfb.ko should contain a value
different from 0 for auxmemsize and your kernel config has to provide a BPA2
partition big enough called gfx-memory.
To be able to cope with hardware restrictions of the blitter (surfaces may
not cross a 64MB boundary) we make sure memory allocated from the 'gfx-memory'
partition does not cross such bounds. Alternatively, and to also give the
system integrator a more fine grained control of the LMIs used, we
additionally support multiple 'gfx-memory-%d' BPA2 partitions, in which case
we just assume they are correctly aligned & sized and do nothing ourselves to
compensate for this hardware restriction.

Thus, the recommended way to configure your stmfb memories is to allocate
just as little as needed to support the main framebuffer requirements as
memsize and take any additional memory from auxmem.

The SD Mode Parameter
=====================

The <sdmode> parameter is used to pick a preferred SD TV encoding standard,
when the framebuffer is switched to a display mode that can support more than
one. It will typically reflect the country the platform is being deployed in.
This parameter does not set the default display mode, that is done using <mode>.

Example1: a platform for the Japanese market may set <sdmode> to NTSC-J. When
          the display mode is changed to 720x480@59i then the encoding used for
          CVBS output and the levels for YPrPb will match the NTSC-J standard. 
          If this platform also supports multi-standard output, then changing
          the display mode to 720x576@50i will default to PAL.
          
Example2: a platform for the French market may set <sdmode> to SECAM. When
          the display mode is changed to 720x576@50i then the encoding used for
          CVBS output and the levels for YPrPb will match the SECAM standard. 
          If this platform also supports multi-standard output, then changing
          the display mode to 720x480@59i will default to NTSC-M.

The Analogue Colour Parameter
=============================

This effect of this parameter is partially dependent on the cababilities of a
display pipeline, the chip and what mode is active. The following are the
available settings.

         |   7100/7109       |     7200Cut1      |     7200Cut2      |
         |-------------------|-------------------|-------------------|
display0 |    YUV/RGB/CVBS   | YUV/RGB*/CVBS     | YUV/RGB/CVBS      |
display1 |      CVBS         | YUV/CVBS          | YUV/RGB/CVBS      |
display2 |       N/A         | YUV/CVBS          | YUV/CVBS          |
         |-----------------------------------------------------------|
         |  7111/7141/7105   |        5202       |
         |-------------------|-------------------|
display0 | YUV/RGB/CVBS      |     YUV/RGB/CVBS  |
display1 | YUV/RGB/CVBS      |       CVBS        |
display2 |       N/A         |        N/A        |

* for VESA VGA or HD/ED modes with sync on green only

If YUV or RGB is specified and the device supports simultaneous CVBS in SD
modes then CVBS will be enabled by default as well. The CVBS option also 
enables Y/C (S-Video) outputs. This is intended to provide a useful starting
point, but the settings can be changed after the modules are loaded using
the "stfbset" application or using DirectFB to meet more complex application
needs.

display0 behaves differently on 7200Cut1 to the other chips when set to an SD
display mode. The other chips can output CVBS and Y/C at the same time as
either component YUV with embedded syncs or RGB with no syncs (European SCART
uses RGB+CVBS for its syncs). The 7200Cut1 will output either YUV (via HD DACs)
or CVBS+Y/C (via SD DACs) but not both simulateously; SD (PAL/NTSC) RGB output
is not supported on 7200Cut1.

In addition the 7111,7141,7105 and 7200Cut2 display1 can output YUV or RGB
through the HD DACs. This allows SD output on RGB SCART and HD output
(via display0) on HDMI at the same time. The arbitration of the use of the
HD DACs between display0 and display1 is simply the most recent thing that asked
to use the DACs will be displayed. If you do not wish the outputs to clash with
each other, you should correctly setup the analogue colour parameter or post
install use the stfbset application, to make sure only one output is configured
to use the HD DACs at any time.

The HDMI Colour Parameter
=========================

The <hdmicolour> parameter selects the colourspace used for output to HDMI
devices, if they report support for YUV in their EDID. DVI devices only use RGB,
this parameter is ignored if a DVI device is detected.

The BDisp API version Parameter
===============================

The <bdispapiversion> parameter selects which API version this driver should
support for accessing the BDisp. The default for now is 0, which is the
traditional STMFBIO_BLT based ioctl() api. Specifying 1 here will enable
support for an mmap() based approach to access the BDisp, which, depending on
the use case, can result in a notable blitter performance gain and/or
reduction of host CPU usage.
API version 1 requires a completely new DirectFB graphics driver, which we
ship since version 1.0.1-31 of our stm-target-directfb package.
If enabled, <memsize> may need to be adjusted, since the userspace bdisp
driver needs some extra memory for its own use. Just add 4096 bytes in that
case. And make sure that <memsize> is an integer multiple of 4096.

Runtime Configuration
=====================

The loaded framebuffers can be controlled from userspace using the standard
Linux program "fbset" and the ST provided "stfbset".

"fbset" is used to change the display mode and colour depth.

"stfbset" is used to control properties of the hardware graphics plane, 
the mixer and the overall output of the board:

1. enable/disable individual analogue and digital outputs;

2. change the global transparency of the plane (note that DirectFB users should
   use IDirectFBDisplayLayer::SetOpacity to do this);

3. change the global gain/brightness of the plane from 0-100% (note that
   directFB users should use IDirectFBDisplayLayer::SetColorAdjustment );

4. change the mixer background colour (note that DirectFB users should do this
   with the IDirectFBScreen::SetMixerConfiguration interface instead);

5. enable/disable the flicker filter(*) on graphics planes that have it (note
   that DirectFB users should enable this by configuring the primary layer);

6. change the graphics plane blend mode (again DirectFB users should set this
   when configuring the primary layer, and should almost always configure
   the primary surface as DSCAPS_PREMULTIPLIED);

7. enable/disable rescaling RGB values from 0-255 to 16-235 (**)

Notes:
(*) the flicker filter is only available in RGB (Truecolor) display modes, it
    is always disabled if the framebuffer is set to 8bpp.

(**) if you are using DirectFB or some other graphics package to generate a
     user interface with per pixel alpha (e.g. 32bit ARGB) then you have to be
     carefull about what you generate. In the case of DirectFB you are almost
     certainly going to end up with graphics in a pre-multiplied alpha form.
     That is, you actually have (A, R*A, G*A, B*A) and you will have set up 
     the graphics plane so it is blended with, for instance, video below it on
     this basis.

     In this mode you must NOT use the graphics planes rescaling to ensure 
     the pixel values are in the sRGB range for TV applications i.e. 16-235.
     Lets take a totally transparent pixel, by definition this _must_ have the
     value (A=0,Ra=0,Ga=0,Ba=0). If rescaling is switched on, this will become
     (A=0,Ra=16,Ga=16,Ba=16) and this is NOT a VALID alpha pre-multiplied pixel.
     What then happens when this is blended with the video below is that pixel
     get "lighter" as the RGB values get erroneously added to the colour of the
     video pixel, when this totally transparent pixel should have had no effect.

     If you are producing a purely graphics system, that does not use per pixel
     transparency, then the rescale can be used. You may want to make your
     graphics drawing code easier, or portable between PC and CE/TV worlds,
     by working in the full RGB range. The rescale will then compress this
     so the extremes are not clipped by the final output or display device.

