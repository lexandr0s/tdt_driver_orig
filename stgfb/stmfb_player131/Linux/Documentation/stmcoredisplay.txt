What is stmcoredisplay?
=======================

This is a display pipeline driver for certain STMicroelectronics SoCs. The
following chips are supported:

(o) STx7100 Cut3.x
(o) STx7109 Cut3.x
(o) STi7200 Cut1/Cut2
(o) STi7111
(o) STx7141
(o) STi7105
(o) STx5202

The driver constructs a number of platform devices to represent the display
pipelines available in the system. Other drivers, such as the stmfb framebuffer,
can register platform drivers to use the display, or get direct access to the
underlying core display API. 

How to use it?
==============

Simply modprobe the core driver module required. If you regularly change the
chip type in your board then you can set up an /etc/modprobe.conf rule to load
all the modules you might need and only one will succeed, e.g.

install stmcore-display \
  _CPU=`grep 'cpu type' < /proc/cpuinfo | cut -d ' ' -f 3 | tr -c -d 0-9` ; \
  _CUT=`grep 'cut' < /proc/cpuinfo | cut -d ' ' -f 2 | cut -b 1` ; \
  echo "running /sbin/modprobe --ignore-install stmcore-display-st[ix]${_CPU}c${_CUT} || stmcore-display-st[ix]${_CPU}" ; \
  /sbin/modprobe --ignore-install stmcore-display-sti${_CPU}c${_CUT} || \
  /sbin/modprobe --ignore-install stmcore-display-stx${_CPU}c${_CUT} || \
  /sbin/modprobe --ignore-install stmcore-display-sti${_CPU} || \
  /sbin/modprobe --ignore-install stmcore-display-stx${_CPU}

install stmfb-automatic \
  _BOARD=`grep 'machine' < /proc/cpuinfo | cut -d ' ' -f 2` ; \
  _CPU=`grep 'cpu type' < /proc/cpuinfo | cut -d ' ' -f 3 | tr -c -d 0-9` ; \
  _CUT=`grep 'cut' < /proc/cpuinfo | cut -d ' ' -f 2 | cut -b 1` ; \
  \
  _AWG=component_${_CPU}c${_CUT}_${_BOARD}.fw ; \
  [ -f /lib/firmware/${_AWG} ] || _AWG=component_${_CPU}c${_CUT}.fw ; \
  [ -f /lib/firmware/${_AWG} ] || _AWG=component_${_CPU}_${_BOARD}.fw ; \
  [ -f /lib/firmware/${_AWG} ] || _AWG=component_${_CPU}.fw ; \
  echo using ${_AWG} ; \
  ln -sf ${_AWG} /lib/firmware/component.fw ; \
  \
  /sbin/modprobe stmcore-display; \
  /sbin/modprobe stmfb

alias fb0 stmfb-automatic


alternatively:
--------------
install stmcore-display \
  /sbin/modprobe stmcore-display-stx7100; \
  /sbin/modprobe stmcore-display-stx7109c3; \
  /bin/true
  
install stmfb-automatic \
  /sbin/modprobe stmcore-display; \
  /sbin/modprobe stmfb
  
alias fb0 stmfb-automatic


The former will deal with dynamically setting up correct symlinks for the AWG
firmware files, since they are different for every board & cpu combination.
This is important for component output on STi7111 & STi7200, and is convenient
if you switch boards often. If not, you just might want to copy the appropriate
AWG firmware file to /lib/firmware/awg.fw and avoid the scripting involved.

Module Parameters
=================
The core driver has a single module paramter named hdmi0, its parameter string
has the form:

paramstring := e[nable] | E[NABLE] | d[isable] | D[ISABLE]

The default behaviour, if no parameter is given, is for HDMI output to be
enabled once a valid display mode is requested, for instance by loading the
framebuffer module. However for some applications it may be desirable to keep
HDMI disabled until the application has had a chance to inspect the sink's EDID.

e.g. one could add the following to your modprobe configuration file:

option stmcore-display-stx7109c3 hdmi0=disable

Sysfs
=====

The core driver creates a new class device "stmcoredisplay", which appears
in /sys/class. Under this a class device for each display pipeline available, 
which appears as /sys/class/stmcoredisplay/displayN, is created. Each pipeline
has an "info" attribute which, when read, produces a human readable description
of the pipeline's capabilities. If the pipeline has a HDMI output then a
second class device appears as /sys/class/stmcoredisplay/displayN/hdmiN.0 . This
contains a number of attributes which were located in /sys/class/graphics/hdmi
in previous driver versions, including the pollable hotplug attribute.

HDMI Character Device
=====================

A character device is created for each display pipeline that has a HDMI 
serializer. The device major/minor can be obtained from reading the
/sys/class/stmcoredisplay/displayN/hdmiN.0/dev attribute. On a udev system
the devices should appear automatically as /dev/hdmiN.0 . Reading from the
device returns the full 32k extended EDID blocks read from a connected
display. If no display is connected, a read will result in EOF. Displays are
unlikely to use the full space available, in fact most TVs still only use the 
first two blocks, in which case the unused blocks will contain all zeros.

The device supports the following IOCTLS, whose definitions can be found in
<linux/stm/hdmi.h> on the target filesystem.

STMHDMIIO_SET_SPD_DATA: Set the Source Product Descriptor contents, which are
sent to a connected HDMI device approximately once per second automatically 
by the driver. See CEA-861 for details of the values to be sent.

STMHDMIIO_SET_AUDIO_DATA: Set the channel count, speaker configuration and
downmix information for audio info frames.

STMHDMIIO_SEND_IFRAME: Send a CEA-861 info frame to the connected HDMI device.
This can be used to send vendor specific frames for instance. It cannot be
used to send AVI and Audio info frames (will return EINVAL) as these are
generated automatically by the driver. The mechanism is currently lossy, in 
that if the IOCTL is called before a previous frame has been transmitted the
new frame will be discarded. 

STMHDMIIO_SET_AVMUTE: Send a General Control Packet to set or clear the AVMUTE
state. 

STMHDMIIO_SET_AUDIO_SOURCE: Select the HDMI audio source, PCM/I2S converters
or SPDIF player. This typically selects audio from different ALSA devices to
be routed to HDMI and the actual behaviour is chip dependent.

STMHDMIIO_SET_VIDEO_SCAN_TYPE: Change the AVI Info frame flag for overscan or
underscan.


Driver Writers
==============
Driver writers should look at "Linux/include/linux/stm/stmcoredisplay.h"
and "include/stmdisplay*.h" for details of the platform device and core driver
API respectively. However in brief a driver wishing to utilize a display
pipeline has two options, firstly it can register a platform driver for the
device id "stmcore-display". The driver will get probed once for each display
pipeline available. The probe callback gets a platform device pointer passed
to it, which contains platform data describing the pipeline, that can be
retrieved as follows:

#include <linux/stm/stmcoredisplay.h>

...

static int probe(struct platform_device *pdev)
{
    struct stmcore_display_pipeline_data *pd;

    pd = *((struct stmcore_display_pipeline_data **)pdev->dev.platform_data);

Note that this has changed from previous driver versions from a shallow copy
of the platform data structure to a pointer to that structure. This is the
mechanism currently used by the supplied framebuffer driver. If the framebuffer
is used in your system (likely) then other clients of the core driver probably
do not want to register as a platform driver as (a) the linux management is
likely to get confused by having two drivers for the same platform device and
(b) the framebuffer will have stored private data in the platform device
structure which should not be changed.

So there is a second, direct method to get hold of a display pipeline's
platform data, using the exported function:

int stmcore_get_display_pipeline(int pipeline,
                                 struct stmcore_display_pipeline_data *data)
                                 
This returns a shallow copy of the platform data, into a buffer provided by the
caller, for the requested pipeline (numbered starting from 0). If the requested
pipeline does not exist then this function returns -ENODEV.

In the platform driver case it is necessary to obtain a reference to the core
driver module, using for example:

  if(!try_module_get(pd->owner))
    return -ENODEV;

to prevent the core driver module from being unloaded while in use. If you
use the exported module function then this isn't necessary, but it does no
harm, as there is an explicit dependency generated by the use of the exported
symbol. If a module reference is obtained then please remember to do a
module_put(pd->owner) to release the reference once your driver has finished
with the display pipeline.

